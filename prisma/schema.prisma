// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "sqlite"
  url = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id            String    @id @default(cuid())
  userId        String
  expires       DateTime
  has_expired   String    
  sessionToken  String    @unique
  accessToken   String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references:[id])
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String    @unique
  password      String 
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  watchlists     Watchlist[]
}

model Movie {
  id            String          @id @default(cuid())
  title         String          @unique
  thumbnail     String?
  description   String?
  directorId    String? 
  location      String
  createdAt     DateTime        @default(now())
  director      Director?       @relation(fields: [directorId], references:[id])
  genres        GenreOnMovie[]
  watchlists    Watchlist[]
}

model Director {
  id            String  @id @default(cuid())
  name          String  @unique
  movies        Movie[]
}

// Algún día
//model Casting {
//  id            String  @id @default(cuid())
//  name          String  @unique
//  movies        Movie[]
//}

model Genre {
  id            String          @id @default(cuid())
  name          String          @unique
  movies        GenreOnMovie[]
}

model GenreOnMovie {
  movieId       String
  movie         Movie   @relation(fields: [movieId], references: [id])
  genreId       String
  genre         Genre   @relation(fields: [genreId], references: [id])

  @@id([movieId, genreId])
}

model Watchlist {
  movieId       String
  movie         Movie   @relation(fields: [movieId], references: [id])
  userId        String
  user          User    @relation(fields: [userId],  references: [id])

  @@id([movieId, userId])
}